using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;

namespace RedStream
{
    public static class RsShipFactory
    {

        static RsWaveData WaveData;
        static TimeSpan Timer = TimeSpan.Zero;
        const int shipTypes = 3;
        static int[] ships = new int[shipTypes];

        public static void LoadWave(int waveNum)
        {
            LoadWave("Wave" + waveNum);
        }

        public static void LoadWave(string waveName)
        {
            try
            {
                WaveData = (RsWaveData)RedStream.Content.GetObjectAttributes("Waves\\"  + waveName);
            }
            catch (ContentLoadException)
            {
                RsGameInfo.iWave = 1;
                WaveData = (RsWaveData)RedStream.Content.GetObjectAttributes("Waves\\Wave1");
            }

            
            for (int i = 0; i < shipTypes; i++ )
            {
                RsGameInfo.ShipsLeft += WaveData.ShipCount[i];

                ships[i] = 0;
            }
            
        }


        public static void Update(GameTime gameTime)
        {
            
            Timer -= gameTime.ElapsedGameTime;
            if (Timer <= TimeSpan.Zero)
            {
                for (int i = 0; i < shipTypes; i++)
                {
                    if (ships[i]<WaveData.ShipCount[i]) 
                    {
                        CreateShip("TestShip" + i);
                        ships[i]++;
                        break;
                    }

                    if (RsGameInfo.ShipsLeft <= 0)
                    {
                        RsGameInfo.ShipsLeft = 0;
                        if (RsGameInfo.iWave == 2)
                        {
                            RsStateManager.Push(new RsEndState());
                        }
                        else
                        {
                            NextLevel();
                        }
                        break;
                    }
                }

                //if (shipType0 < WaveData.ShipCount[0])
                //{
                //    CreateShip("" + (int)RsShipData.Mode.Straight);
                //    shipType0++;
                //}
                //else if (shipType1 < WaveData.ShipCount[1])
                //{
                //    CreateShip("" + (int)RsShipData.Mode.Orbit);
                //    shipType1++;
                //}

                //else if (shipType2 < WaveData.ShipCount[2])
                //{
                //    CreateShip("" + (int)RsShipData.Mode.HitAndRun);
                //    shipType2++;
                //}

                    Timer = TimeSpan.FromSeconds(WaveData.SpawnRate);
            }

        }

        public static void CreateShip(string shipName)
        {
            /* Read the graphic attributes and the ship attributes */
            DescDataPair<RsShipData> pair = new DescDataPair<RsShipData>("Ships\\" + shipName);

            /* Anything in the GameObjectDesc must be initialized in code, since this is runtime state */
            pair.Desc.Pos = RsUtil.GetRandomVector(40, 49);

            /* And now we can create the ship object based on the description */
            RsShip ship = new RsShip(pair.Desc, pair.Data);

            ship.FacePoint(Vector3.Zero);
            ship.OrbitAxis = ship.Up;
        }

        public static void NextLevel()
        {
            
            RsStateManager.Push(new RsScoreState());
            LoadWave(++RsGameInfo.iWave);
        }
    }
}
