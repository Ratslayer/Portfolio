using System;
using System.Collections.Generic;
using System.Net;
using System.IO;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using System.Linq;

namespace Mongoose
{
	public class EventRESTAPIConnector : IBuildingChangeListener
	{
		private string currentBuilding;
		public List<string> filters;

		public EventRESTAPIConnector()
		{
			filters = new List<string>();
			currentBuilding = Globals.LastBuilding;
		}

		public string Building
		{
			get
			{
				return currentBuilding;
			}
		}
		/// <summary>
		/// This function grabs filters from the settings once that has been implemented
		/// </summary>
		/// <returns>The filters from settings.</returns>
		public List<string> GetFiltersFromSettings()
		{
			Dictionary<string,string> filterDictionary = new Dictionary<string,string>();

			foreach (KeyValuePair<string,string> entry in Settings.Filters)
			{
				filterDictionary.Add(entry.Key, entry.Value);
			}

			foreach (KeyValuePair<string,string> entry in filterDictionary)
			{
				System.Diagnostics.Debug.WriteLine(entry.Key + "=" + entry.Value);
				string key = entry.Key;
				string value = entry.Value;
				filters.Add(key + "=" + value);
			}
			return filters;
		}
		/// <summary>
		/// Creates the URL that will be used to query the REST API
		/// </summary>
		/// <returns>The UR.</returns>
		/// <param name="building">Building.</param>
		public string CreateURL(string building)
		{
			List<string> filtersFromSettings = GetFiltersFromSettings();
			if (filtersFromSettings.Any())
			{
				this.filters.AddRange(filtersFromSettings);
			}
			string query = "http://www-qa.concordia.ca/etc/designs/concordia/resources/events.json?building=" + building + "&";

			foreach (string filter in filters)
			{
				query = query + filter + "&";
			}

			return query;
		}
		/// <summary>
		///  Queries the REST API with the string generated by CreateURL and returns a JSON string
		/// </summary>
		/// <returns>The RESTAP.</returns>
		/// <param name="url">URL.</param>
		public async Task<string> CallRESTAPI(string url)
		{
			var httpClient = new HttpClient();
			httpClient.Timeout = new TimeSpan(0, 0, 10);
			Task<string> contentsTask;
			string contents;
			try
			{
				contentsTask = httpClient.GetStringAsync(url);
				contents = await contentsTask;
			}

			catch (TaskCanceledException tce)
			{
				System.Diagnostics.Debug.WriteLine("Task Canceled Exception: " + tce.Message);
				contents = "You are not connected to the Concordia network!";
				httpClient.CancelPendingRequests();
			}

			catch (WebException we)
			{
				System.Diagnostics.Debug.WriteLine("WebException" + we.Message);
				contents = "You are not connected to the Concordia network!";
				httpClient.CancelPendingRequests();
			}

			string result = string.Empty;
			result += contents;

			return result;
		}
		/// <summary>
		/// implementation of the listener onbuildingchange
		/// </summary>
		/// <param name="newLocation">New location.</param>
		public void OnBuildingChange(ILocation newLocation)
		{
			currentBuilding = newLocation.Building;
		}
	}
}

